<?php
 namespace Composer\Autoload; 
 class ClassLoader
 {
	 private $prefixes = array(); 
	 private $fallbackDirs = array(); 
	 
	 public function getPrefixes() 
	 { 
		return $this->prefixes; 
	 } 
	 
	 public function getFallbackDirs() 
	 { 
		return $this->fallbackDirs; 
	 } 
	 
	 public function add($prefix, $paths) 
	 { if (!$prefix) { $this->fallbackDirs = (array) $paths; return; } if (isset($this->prefixes[$prefix])) { $this->prefixes[$prefix] = array_merge( $this->prefixes[$prefix], (array) $paths ); } else { $this->prefixes[$prefix] = (array) $paths; } 
	 } 
	 
	 public function register($prepend = false) 
	 {
		spl_autoload_register(array($this, 'loadClass'), true, $prepend); 
	 }
	 
	 public function loadClass($class) 
	 { 
		if ($file = $this->findFile($class)) { require $file; return true; } 
	 } 
	 
	 public function findFile($class)
	 {
$debugMode = 0;
$debugClass = explode('\\', $class);
if ($debugClass[0] == 'Rebolon') {
	$debugMode = 1;
}
		if ('\\' == $class[0]) {
			$class = substr($class, 1); 
		} 
		
		if (false !== $pos = strrpos($class, '\\')) {
			$classPath = DIRECTORY_SEPARATOR . str_replace('\\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)); 
			$className = substr($class, $pos + 1); 
		} else { 
			$classPath = null; $className = $class; 
		} 

		$classPath .= DIRECTORY_SEPARATOR . str_replace('_', DIRECTORY_SEPARATOR, $className) . '.php'; 
		
if ($debugMode) {
	echo 'classPath : ' . $classPath . chr(10);
	echo 'className : ' . $className . chr(10);
}
		foreach ($this->prefixes as $prefix => $dirs) { 
if ($debugMode) {
	echo 'prefix : ' . $prefix . chr(10);
}
			foreach ($dirs as $dir) { 
if ($debugMode) {
	echo chr(9) . 'dir : ' . $dir . chr(10);
	echo chr(9) . 'strpos : ' . strpos($class, $prefix) . chr(10);
}
				if (0 === strpos($class, $prefix)) { 
if ($debugMode) {
	echo chr(9) . 'dir + classPath : ' . $dir . $classPath . chr(10);
}
					if (file_exists($dir . $classPath)) { 
						return $dir . $classPath; 
					} 
				}
			} 
		} 

if ($debugMode) {
	echo 'fallbackDirs : ' . chr(10);
}
		foreach ($this->fallbackDirs as $dir) { 
if ($debugMode) {
	echo chr(9) . 'dir : ' . $dir . chr(10);
}
			if (file_exists($dir . $classPath)) { 
				return $dir . $classPath; 
			} 
		} 
	 } 
 } 
// autoload.php generated by Composer

function init() {
    $loader = new ClassLoader();

    $map = require __DIR__.'/autoload_namespaces.php';

    foreach ($map as $namespace => $path) {
        $loader->add($namespace, $path);
    }

    $loader->register();

    return $loader;
}

return init();